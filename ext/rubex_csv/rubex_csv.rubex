# FIXME: This call should be handled via an API declared in rubex_require style file.
lib "rubex/ruby"; end

# FIXME: Have some 'api' files that allow accessing these functions directly.
lib "<stdio.h>"
  struct FILE
  end
  alias FILE = struct FILE
  
  FILE * fopen(char *, char *)
  char * fgets(char *, int n, FILE *)
  int fclose( FILE * )
end

lib "<stdlib.h>"
  int atoi(char *)
end

struct csv_data
  FILE *file
  char * data
  int *means
end

class NativeThreadReader attach csv_data
  def initialize(file_name, lines)
    @file_name = file_name
    @lines = lines
    char * file = @file_name
    int num_lines = @lines
    
    data$.csv_data.file = fopen(file, "r")
    raise(ArgumentError, "Cannot read this file") if data$.csv_data.file == NULL

    int i = 0
    while(i < num_lines) do
      fgets(&data$.csv_data.data[i*200], 200, data$.csv_data.file)
      i += 1
    end
  end

  # line - the line number to start at
  # step - the max line number for this block in the csv file
  cfunc double _read_and_profit(int line, int step, char * d) no_gil
    int i = line
    int commas, j
    char c
    char *current_line
    double sum = 0
  
    while(i < step) do
      commas = 0
      j = 0
      current_line = &d[i*200]
    
      while (commas < 13) do
        if (current_line[j] == ',')
          commas += 1
        end
        j += 1
      end
      sum += atoi(&current_line[j])
      i += 1
    end

    return sum
  end

  # Multi-threaded reading of files. 
  # Method of working:
  # * Spawn 4 threads and pass the line numbers which are to be read for each thread.
  # * Inside each thread 
  def read_and_profit(line, step_size)
    int line_no = line
    int step = step_size
    double pr = 0
    char *d = data$.csv_data.data
    no_gil
      pr = _read_and_profit(line_no, step + line_no, d)
    end

    return pr
  end

  cfunc object allocate
    data$.csv_data = <csv_data *>xmalloc(sizeof(csv_data))
    data$.csv_data.data = <char *>xmalloc(sizeof(char)*500000*200)
  end

  cfunc void deallocate
    fclose(data$.csv_data.file)
    xfree(data$.csv_data.data)
    xfree(data$.csv_data)
  end
end
